$date
	Thu Sep 17 16:07:22 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 1 ! RegWrite $end
$var wire 1 " RegDst $end
$var wire 1 # MemtoReg $end
$var wire 1 $ MemWrite $end
$var wire 1 % MemRead $end
$var wire 1 & Branch $end
$var wire 1 ' ALUSrc $end
$var wire 1 ( ALUOp1 $end
$var wire 1 ) ALUOp0 $end
$var reg 6 * opcode [5:0] $end
$var integer 32 + i [31:0] $end
$scope module pla $end
$var wire 1 ) ALUOp0 $end
$var wire 1 ( ALUOp1 $end
$var wire 1 ' ALUSrc $end
$var wire 1 & Branch $end
$var wire 1 % MemRead $end
$var wire 1 $ MemWrite $end
$var wire 1 # MemtoReg $end
$var wire 1 " RegDst $end
$var wire 1 ! RegWrite $end
$var wire 1 , Rformat $end
$var wire 1 - beq $end
$var wire 1 . lw $end
$var wire 6 / op [5:0] $end
$var wire 1 0 sw $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x0
bx /
x.
x-
x,
b0 +
bx *
x)
x(
x'
x&
x%
x$
x#
x"
x!
$end
#100
1!
1"
1)
1,
0&
0(
0-
0'
0#
0%
0.
0$
00
b1 +
b0 *
b0 /
#200
0!
0"
0)
0,
b10 +
b1 *
b1 /
#300
b11 +
b10 *
b10 /
#400
b100 +
b11 *
b11 /
#500
1&
1(
1-
b101 +
b100 *
b100 /
#600
0&
0(
0-
b110 +
b101 *
b101 /
#700
0&
0(
0-
b111 +
b110 *
b110 /
#800
b1000 +
b111 *
b111 /
#900
b1001 +
b1000 *
b1000 /
#1000
b1010 +
b1001 *
b1001 /
#1100
b1011 +
b1010 *
b1010 /
#1200
b1100 +
b1011 *
b1011 /
#1300
b1101 +
b1100 *
b1100 /
#1400
b1110 +
b1101 *
b1101 /
#1500
b1111 +
b1110 *
b1110 /
#1600
b10000 +
b1111 *
b1111 /
#1700
b10001 +
b10000 *
b10000 /
#1800
b10010 +
b10001 *
b10001 /
#1900
b10011 +
b10010 *
b10010 /
#2000
b10100 +
b10011 *
b10011 /
#2100
b10101 +
b10100 *
b10100 /
#2200
b10110 +
b10101 *
b10101 /
#2300
b10111 +
b10110 *
b10110 /
#2400
b11000 +
b10111 *
b10111 /
#2500
b11001 +
b11000 *
b11000 /
#2600
b11010 +
b11001 *
b11001 /
#2700
b11011 +
b11010 *
b11010 /
#2800
b11100 +
b11011 *
b11011 /
#2900
b11101 +
b11100 *
b11100 /
#3000
b11110 +
b11101 *
b11101 /
#3100
b11111 +
b11110 *
b11110 /
#3200
b100000 +
b11111 *
b11111 /
#3300
b100001 +
b100000 *
b100000 /
#3400
b100010 +
b100001 *
b100001 /
#3500
b100011 +
b100010 *
b100010 /
#3600
1'
1!
1#
1%
1.
b100100 +
b100011 *
b100011 /
#3700
0'
0!
0#
0%
0.
b100101 +
b100100 *
b100100 /
#3800
b100110 +
b100101 *
b100101 /
#3900
b100111 +
b100110 *
b100110 /
#4000
b101000 +
b100111 *
b100111 /
#4100
b101001 +
b101000 *
b101000 /
#4200
b101010 +
b101001 *
b101001 /
#4300
b101011 +
b101010 *
b101010 /
#4400
1'
1$
10
b101100 +
b101011 *
b101011 /
#4500
0'
0$
00
b101101 +
b101100 *
b101100 /
#4600
b101110 +
b101101 *
b101101 /
#4700
b101111 +
b101110 *
b101110 /
#4800
b110000 +
b101111 *
b101111 /
#4900
b110001 +
b110000 *
b110000 /
#5000
b110010 +
b110001 *
b110001 /
#5100
b110011 +
b110010 *
b110010 /
#5200
b110100 +
b110011 *
b110011 /
#5300
b110101 +
b110100 *
b110100 /
#5400
b110110 +
b110101 *
b110101 /
#5500
b110111 +
b110110 *
b110110 /
#5600
b111000 +
b110111 *
b110111 /
#5700
b111001 +
b111000 *
b111000 /
#5800
b111010 +
b111001 *
b111001 /
#5900
b111011 +
b111010 *
b111010 /
#6000
b111100 +
b111011 *
b111011 /
#6100
b111101 +
b111100 *
b111100 /
#6200
b111110 +
b111101 *
b111101 /
#6300
b111111 +
b111110 *
b111110 /
#6400
b1000000 +
b111111 *
b111111 /
